
BM_TIM2_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f8  08000500  00001500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f8  080004f8  00001500  2**0
                  CONTENTS
  4 .ARM          00000000  080004f8  080004f8  00001500  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f8  08000500  00001500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f8  080004f8  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004fc  080004fc  000014fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000500  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000500  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000533  00000000  00000000  00001529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000163  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000068f  00000000  00000000  00011b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054584  00000000  00000000  000121f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000667bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00066814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004e0 	.word	0x080004e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004e0 	.word	0x080004e0

08000170 <main>:
#include "stm32f1xx.h"

volatile uint16_t adc_data[3];

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
    // Configuração dos pinos para PWM
    {
        volatile unsigned long *CR;
        unsigned short tPIN = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	817b      	strh	r3, [r7, #10]
        unsigned short offset = 0x00;
 800017a:	2300      	movs	r3, #0
 800017c:	813b      	strh	r3, [r7, #8]

        // PB0 para PWM Canal 3
        RCC->APB2ENR |= 8;  // Habilita PORT B
 800017e:	4ba1      	ldr	r3, [pc, #644]	@ (8000404 <main+0x294>)
 8000180:	699b      	ldr	r3, [r3, #24]
 8000182:	4aa0      	ldr	r2, [pc, #640]	@ (8000404 <main+0x294>)
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	6193      	str	r3, [r2, #24]
        CR = (volatile unsigned long *) (&GPIOB->CRL + offset);
 800018a:	893b      	ldrh	r3, [r7, #8]
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000192:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8000196:	607b      	str	r3, [r7, #4]
        *CR &= ~(0xF << (tPIN * 4));  // Reseta o pino alvo
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	897a      	ldrh	r2, [r7, #10]
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	210f      	movs	r1, #15
 80001a2:	fa01 f202 	lsl.w	r2, r1, r2
 80001a6:	43d2      	mvns	r2, r2
 80001a8:	401a      	ands	r2, r3
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	601a      	str	r2, [r3, #0]
        *CR |= ((0x3 << (tPIN * 4)) | (0x2 << (tPIN * 4 + 2)));  // Direção e opção
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	897a      	ldrh	r2, [r7, #10]
 80001b4:	0092      	lsls	r2, r2, #2
 80001b6:	2103      	movs	r1, #3
 80001b8:	4091      	lsls	r1, r2
 80001ba:	897a      	ldrh	r2, [r7, #10]
 80001bc:	0092      	lsls	r2, r2, #2
 80001be:	3202      	adds	r2, #2
 80001c0:	2002      	movs	r0, #2
 80001c2:	fa00 f202 	lsl.w	r2, r0, r2
 80001c6:	430a      	orrs	r2, r1
 80001c8:	431a      	orrs	r2, r3
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	601a      	str	r2, [r3, #0]

        // PA6 para PWM Canal 1
        tPIN = 6;
 80001ce:	2306      	movs	r3, #6
 80001d0:	817b      	strh	r3, [r7, #10]
        offset = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	813b      	strh	r3, [r7, #8]
        RCC->APB2ENR |= 4;  // Habilita PORT A
 80001d6:	4b8b      	ldr	r3, [pc, #556]	@ (8000404 <main+0x294>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	4a8a      	ldr	r2, [pc, #552]	@ (8000404 <main+0x294>)
 80001dc:	f043 0304 	orr.w	r3, r3, #4
 80001e0:	6193      	str	r3, [r2, #24]
        CR = (volatile unsigned long *) (&GPIOA->CRL + offset);
 80001e2:	893b      	ldrh	r3, [r7, #8]
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80001ea:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80001ee:	607b      	str	r3, [r7, #4]
        *CR &= ~(0xF << (tPIN * 4));  // Reseta o pino alvo
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	897a      	ldrh	r2, [r7, #10]
 80001f6:	0092      	lsls	r2, r2, #2
 80001f8:	210f      	movs	r1, #15
 80001fa:	fa01 f202 	lsl.w	r2, r1, r2
 80001fe:	43d2      	mvns	r2, r2
 8000200:	401a      	ands	r2, r3
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
        *CR |= ((0x3 << (tPIN * 4)) | (0x2 << (tPIN * 4 + 2)));  // Direção e opção
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	897a      	ldrh	r2, [r7, #10]
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	2103      	movs	r1, #3
 8000210:	4091      	lsls	r1, r2
 8000212:	897a      	ldrh	r2, [r7, #10]
 8000214:	0092      	lsls	r2, r2, #2
 8000216:	3202      	adds	r2, #2
 8000218:	2002      	movs	r0, #2
 800021a:	fa00 f202 	lsl.w	r2, r0, r2
 800021e:	430a      	orrs	r2, r1
 8000220:	431a      	orrs	r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]

        // PA7 para PWM Canal 2
        tPIN = 7;
 8000226:	2307      	movs	r3, #7
 8000228:	817b      	strh	r3, [r7, #10]
        *CR &= ~(0xF << (tPIN * 4));  // Reseta o pino alvo
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	897a      	ldrh	r2, [r7, #10]
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	210f      	movs	r1, #15
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	43d2      	mvns	r2, r2
 800023a:	401a      	ands	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	601a      	str	r2, [r3, #0]
        *CR |= ((0x3 << (tPIN * 4)) | (0x2 << (tPIN * 4 + 2)));  // Direção e opção
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	897a      	ldrh	r2, [r7, #10]
 8000246:	0092      	lsls	r2, r2, #2
 8000248:	2103      	movs	r1, #3
 800024a:	4091      	lsls	r1, r2
 800024c:	897a      	ldrh	r2, [r7, #10]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	3202      	adds	r2, #2
 8000252:	2002      	movs	r0, #2
 8000254:	fa00 f202 	lsl.w	r2, r0, r2
 8000258:	430a      	orrs	r2, r1
 800025a:	431a      	orrs	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	601a      	str	r2, [r3, #0]
    }

    // Configuração dos pinos de entrada analógica para ADC
    {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // Habilita o clock para GPIOA
 8000260:	4b68      	ldr	r3, [pc, #416]	@ (8000404 <main+0x294>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a67      	ldr	r2, [pc, #412]	@ (8000404 <main+0x294>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
        GPIOA->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);  // PA1 como entrada analógica
 800026c:	4b66      	ldr	r3, [pc, #408]	@ (8000408 <main+0x298>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a65      	ldr	r2, [pc, #404]	@ (8000408 <main+0x298>)
 8000272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000276:	6013      	str	r3, [r2, #0]
        GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);  // PA2 como entrada analógica
 8000278:	4b63      	ldr	r3, [pc, #396]	@ (8000408 <main+0x298>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a62      	ldr	r2, [pc, #392]	@ (8000408 <main+0x298>)
 800027e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000282:	6013      	str	r3, [r2, #0]
        GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);  // PA3 como entrada analógica
 8000284:	4b60      	ldr	r3, [pc, #384]	@ (8000408 <main+0x298>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a5f      	ldr	r2, [pc, #380]	@ (8000408 <main+0x298>)
 800028a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800028e:	6013      	str	r3, [r2, #0]
    }

    // Configuração do Timer3
    {
        RCC->APB2ENR |= (1 << 0);  // Clock AFIO
 8000290:	4b5c      	ldr	r3, [pc, #368]	@ (8000404 <main+0x294>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a5b      	ldr	r2, [pc, #364]	@ (8000404 <main+0x294>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6193      	str	r3, [r2, #24]
        AFIO->MAPR &= ~(1 << 10);  // Reseta remapeamento dos pinos
 800029c:	4b5b      	ldr	r3, [pc, #364]	@ (800040c <main+0x29c>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a5a      	ldr	r2, [pc, #360]	@ (800040c <main+0x29c>)
 80002a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002a6:	6053      	str	r3, [r2, #4]
        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // Clock TIMER3
 80002a8:	4b56      	ldr	r3, [pc, #344]	@ (8000404 <main+0x294>)
 80002aa:	69db      	ldr	r3, [r3, #28]
 80002ac:	4a55      	ldr	r2, [pc, #340]	@ (8000404 <main+0x294>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	61d3      	str	r3, [r2, #28]
        TIM3->PSC = 0;
 80002b4:	4b56      	ldr	r3, [pc, #344]	@ (8000410 <main+0x2a0>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	629a      	str	r2, [r3, #40]	@ 0x28
        TIM3->ARR = 100;
 80002ba:	4b55      	ldr	r3, [pc, #340]	@ (8000410 <main+0x2a0>)
 80002bc:	2264      	movs	r2, #100	@ 0x64
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM3->CCMR1 = 0x6060;  // Configura PWM no modo 1 para CH1 e CH2
 80002c0:	4b53      	ldr	r3, [pc, #332]	@ (8000410 <main+0x2a0>)
 80002c2:	f246 0260 	movw	r2, #24672	@ 0x6060
 80002c6:	619a      	str	r2, [r3, #24]
        TIM3->CCMR2 = 0x0060;  // Configura PWM no modo 1 para CH3
 80002c8:	4b51      	ldr	r3, [pc, #324]	@ (8000410 <main+0x2a0>)
 80002ca:	2260      	movs	r2, #96	@ 0x60
 80002cc:	61da      	str	r2, [r3, #28]
        TIM3->CCER = 0x0111;   // Habilita os canais de saída
 80002ce:	4b50      	ldr	r3, [pc, #320]	@ (8000410 <main+0x2a0>)
 80002d0:	f240 1211 	movw	r2, #273	@ 0x111
 80002d4:	621a      	str	r2, [r3, #32]
        TIM3->CR1 |= (1 << 0);  // Habilita o Timer
 80002d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000410 <main+0x2a0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a4d      	ldr	r2, [pc, #308]	@ (8000410 <main+0x2a0>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6013      	str	r3, [r2, #0]
    }

    // Configuração do ADC
    {
        RCC->APB2ENR |= 1 << 9;  // Habilita o clock do ADC1
 80002e2:	4b48      	ldr	r3, [pc, #288]	@ (8000404 <main+0x294>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a47      	ldr	r2, [pc, #284]	@ (8000404 <main+0x294>)
 80002e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ec:	6193      	str	r3, [r2, #24]
        ADC1->CR1 = (1 << 8);  // Habilita o modo SCAN
 80002ee:	4b49      	ldr	r3, [pc, #292]	@ (8000414 <main+0x2a4>)
 80002f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002f4:	605a      	str	r2, [r3, #4]
        ADC1->CR2 = (1 << 1);  // Habilita o modo de conversão contínua
 80002f6:	4b47      	ldr	r3, [pc, #284]	@ (8000414 <main+0x2a4>)
 80002f8:	2202      	movs	r2, #2
 80002fa:	609a      	str	r2, [r3, #8]
        ADC1->CR2 |= (7 << 17);  // Seleção do evento externo apontado para SWSTART
 80002fc:	4b45      	ldr	r3, [pc, #276]	@ (8000414 <main+0x2a4>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a44      	ldr	r2, [pc, #272]	@ (8000414 <main+0x2a4>)
 8000302:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000306:	6093      	str	r3, [r2, #8]
        ADC1->CR2 &= ~(1 << 11);  // Alinhamento de dados à direita
 8000308:	4b42      	ldr	r3, [pc, #264]	@ (8000414 <main+0x2a4>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a41      	ldr	r2, [pc, #260]	@ (8000414 <main+0x2a4>)
 800030e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000312:	6093      	str	r3, [r2, #8]
        ADC1->SMPR2 |= (7 << 3) | (7 << 6) | (7 << 9);  // Tempo de amostragem de 239,5 ciclos
 8000314:	4b3f      	ldr	r3, [pc, #252]	@ (8000414 <main+0x2a4>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	4a3e      	ldr	r2, [pc, #248]	@ (8000414 <main+0x2a4>)
 800031a:	f443 637f 	orr.w	r3, r3, #4080	@ 0xff0
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6113      	str	r3, [r2, #16]
        ADC1->SQR1 |= (2 << 20);  // SQR1_L = 2 para 3 conversões
 8000324:	4b3b      	ldr	r3, [pc, #236]	@ (8000414 <main+0x2a4>)
 8000326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000328:	4a3a      	ldr	r2, [pc, #232]	@ (8000414 <main+0x2a4>)
 800032a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800032e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        ADC1->CR2 |= (1 << 8);  // Habilita DMA para ADC
 8000330:	4b38      	ldr	r3, [pc, #224]	@ (8000414 <main+0x2a4>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a37      	ldr	r2, [pc, #220]	@ (8000414 <main+0x2a4>)
 8000336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800033a:	6093      	str	r3, [r2, #8]
        ADC1->SQR3 |= (1 << 0);  // Primeiro canal: PA1 (canal 1)
 800033c:	4b35      	ldr	r3, [pc, #212]	@ (8000414 <main+0x2a4>)
 800033e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000340:	4a34      	ldr	r2, [pc, #208]	@ (8000414 <main+0x2a4>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6353      	str	r3, [r2, #52]	@ 0x34
        ADC1->SQR3 |= (2 << 5);  // Segundo canal: PA2 (canal 2)
 8000348:	4b32      	ldr	r3, [pc, #200]	@ (8000414 <main+0x2a4>)
 800034a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800034c:	4a31      	ldr	r2, [pc, #196]	@ (8000414 <main+0x2a4>)
 800034e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000352:	6353      	str	r3, [r2, #52]	@ 0x34
        ADC1->SQR3 |= (3 << 10);  // Terceiro canal: PA3 (canal 3)
 8000354:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <main+0x2a4>)
 8000356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000358:	4a2e      	ldr	r2, [pc, #184]	@ (8000414 <main+0x2a4>)
 800035a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800035e:	6353      	str	r3, [r2, #52]	@ 0x34

        ADC1->CR2 |= 1 << 0;  // ADON = 1 habilita o ADC1
 8000360:	4b2c      	ldr	r3, [pc, #176]	@ (8000414 <main+0x2a4>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a2b      	ldr	r2, [pc, #172]	@ (8000414 <main+0x2a4>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6093      	str	r3, [r2, #8]
        uint32_t delay = 10000;
 800036c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000370:	60fb      	str	r3, [r7, #12]
        while (delay--);
 8000372:	bf00      	nop
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	1e5a      	subs	r2, r3, #1
 8000378:	60fa      	str	r2, [r7, #12]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1fa      	bne.n	8000374 <main+0x204>

        ADC1->SR = 0;  // Limpa o registrador de status
 800037e:	4b25      	ldr	r3, [pc, #148]	@ (8000414 <main+0x2a4>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
        ADC1->CR2 |= (1 << 20);  // Habilita a conversão no evento externo
 8000384:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <main+0x2a4>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a22      	ldr	r2, [pc, #136]	@ (8000414 <main+0x2a4>)
 800038a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800038e:	6093      	str	r3, [r2, #8]
        ADC1->CR2 |= 1 << 22;  // Inicia a conversão
 8000390:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <main+0x2a4>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a1f      	ldr	r2, [pc, #124]	@ (8000414 <main+0x2a4>)
 8000396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800039a:	6093      	str	r3, [r2, #8]
    }

    // Configuração do DMA
    {
        RCC->AHBENR |= RCC_AHBENR_DMA1EN;  // Habilita o acesso ao Clock do DMA1
 800039c:	4b19      	ldr	r3, [pc, #100]	@ (8000404 <main+0x294>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a18      	ldr	r2, [pc, #96]	@ (8000404 <main+0x294>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6153      	str	r3, [r2, #20]
        DMA1_Channel1->CCR = 0x000005A0;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000418 <main+0x2a8>)
 80003aa:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80003ae:	601a      	str	r2, [r3, #0]
        DMA1_Channel1->CNDTR = 3;
 80003b0:	4b19      	ldr	r3, [pc, #100]	@ (8000418 <main+0x2a8>)
 80003b2:	2203      	movs	r2, #3
 80003b4:	605a      	str	r2, [r3, #4]
        DMA1_Channel1->CPAR = (uint32_t)(&ADC1->DR);
 80003b6:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <main+0x2a8>)
 80003b8:	4a18      	ldr	r2, [pc, #96]	@ (800041c <main+0x2ac>)
 80003ba:	609a      	str	r2, [r3, #8]
        DMA1_Channel1->CMAR = (uint32_t)(adc_data);
 80003bc:	4b16      	ldr	r3, [pc, #88]	@ (8000418 <main+0x2a8>)
 80003be:	4a18      	ldr	r2, [pc, #96]	@ (8000420 <main+0x2b0>)
 80003c0:	60da      	str	r2, [r3, #12]
        DMA1_Channel1->CCR |= DMA_CCR_EN;
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <main+0x2a8>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a14      	ldr	r2, [pc, #80]	@ (8000418 <main+0x2a8>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6013      	str	r3, [r2, #0]

    // Loop principal
    while (1)
    {
        // Ajusta o PWM para cada canal
        TIM3->CCR1 = adc_data[0] / 42;  // Ajusta o PWM para CH1
 80003ce:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <main+0x2b0>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	085b      	lsrs	r3, r3, #1
 80003d6:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <main+0x2b4>)
 80003d8:	fba2 2303 	umull	r2, r3, r2, r3
 80003dc:	089b      	lsrs	r3, r3, #2
 80003de:	b29a      	uxth	r2, r3
 80003e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <main+0x2a0>)
 80003e2:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = adc_data[1] / 42;  // Ajusta o PWM para CH2
 80003e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <main+0x2b0>)
 80003e6:	885b      	ldrh	r3, [r3, #2]
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	085b      	lsrs	r3, r3, #1
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <main+0x2b4>)
 80003ee:	fba2 2303 	umull	r2, r3, r2, r3
 80003f2:	089b      	lsrs	r3, r3, #2
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <main+0x2a0>)
 80003f8:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = adc_data[2] / 42;  // Ajusta o PWM para CH3
 80003fa:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <main+0x2b0>)
 80003fc:	889b      	ldrh	r3, [r3, #4]
 80003fe:	b29b      	uxth	r3, r3
 8000400:	085b      	lsrs	r3, r3, #1
 8000402:	e011      	b.n	8000428 <main+0x2b8>
 8000404:	40021000 	.word	0x40021000
 8000408:	40010800 	.word	0x40010800
 800040c:	40010000 	.word	0x40010000
 8000410:	40000400 	.word	0x40000400
 8000414:	40012400 	.word	0x40012400
 8000418:	40020008 	.word	0x40020008
 800041c:	4001244c 	.word	0x4001244c
 8000420:	2000001c 	.word	0x2000001c
 8000424:	30c30c31 	.word	0x30c30c31
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <main+0x2cc>)
 800042a:	fba2 2303 	umull	r2, r3, r2, r3
 800042e:	089b      	lsrs	r3, r3, #2
 8000430:	b29a      	uxth	r2, r3
 8000432:	4b03      	ldr	r3, [pc, #12]	@ (8000440 <main+0x2d0>)
 8000434:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM3->CCR1 = adc_data[0] / 42;  // Ajusta o PWM para CH1
 8000436:	bf00      	nop
 8000438:	e7c9      	b.n	80003ce <main+0x25e>
 800043a:	bf00      	nop
 800043c:	30c30c31 	.word	0x30c30c31
 8000440:	40000400 	.word	0x40000400

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	@ (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	@ (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	@ (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	@ (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 f811 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff fe7b 	bl	8000170 <main>

0800047a <LoopForever>:

LoopForever:
  b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000488:	08000500 	.word	0x08000500
  ldr r2, =_sbss
 800048c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000490:	20000024 	.word	0x20000024

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	2600      	movs	r6, #0
 800049c:	4d0c      	ldr	r5, [pc, #48]	@ (80004d0 <__libc_init_array+0x38>)
 800049e:	4c0d      	ldr	r4, [pc, #52]	@ (80004d4 <__libc_init_array+0x3c>)
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	10a4      	asrs	r4, r4, #2
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	f000 f81a 	bl	80004e0 <_init>
 80004ac:	2600      	movs	r6, #0
 80004ae:	4d0a      	ldr	r5, [pc, #40]	@ (80004d8 <__libc_init_array+0x40>)
 80004b0:	4c0a      	ldr	r4, [pc, #40]	@ (80004dc <__libc_init_array+0x44>)
 80004b2:	1b64      	subs	r4, r4, r5
 80004b4:	10a4      	asrs	r4, r4, #2
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	080004f8 	.word	0x080004f8
 80004d4:	080004f8 	.word	0x080004f8
 80004d8:	080004f8 	.word	0x080004f8
 80004dc:	080004fc 	.word	0x080004fc

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr
