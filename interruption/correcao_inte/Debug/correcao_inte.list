
correcao_inte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000498  08000498  00001498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800049c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a0  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001211  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055b  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000037a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014b  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015286  00000000  00000000  00003ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d99  00000000  00000000  00018d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b364  00000000  00000000  0001aae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000598  00000000  00000000  00095e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00096424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800047c 	.word	0x0800047c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800047c 	.word	0x0800047c

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	@ (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0112      	lsls	r2, r2, #4
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	@ (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0112      	lsls	r2, r2, #4
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <EXTI0_IRQHandler>:
#endif

#include "stm32f1xx.h"


void EXTI0_IRQHandler(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    // Toggle LED connected to PC13
    GPIOC->ODR ^= (1 << 13);
 80001dc:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <EXTI0_IRQHandler+0x20>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a05      	ldr	r2, [pc, #20]	@ (80001f8 <EXTI0_IRQHandler+0x20>)
 80001e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80001e6:	60d3      	str	r3, [r2, #12]
    // Clear pending interrupt flag
    EXTI->PR = (1 << 0);
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <EXTI0_IRQHandler+0x24>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	615a      	str	r2, [r3, #20]
}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40011000 	.word	0x40011000
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
    GPIOC->ODR ^= (1 << 14);
 8000204:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <EXTI1_IRQHandler+0x20>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <EXTI1_IRQHandler+0x20>)
 800020a:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800020e:	60d3      	str	r3, [r2, #12]
    EXTI->PR = (1 << 1);
 8000210:	4b04      	ldr	r3, [pc, #16]	@ (8000224 <EXTI1_IRQHandler+0x24>)
 8000212:	2202      	movs	r2, #2
 8000214:	615a      	str	r2, [r3, #20]
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40011000 	.word	0x40011000
 8000224:	40010400 	.word	0x40010400

08000228 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 10)) {
 800022c:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <EXTI15_10_IRQHandler+0x2c>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000234:	2b00      	cmp	r3, #0
 8000236:	d009      	beq.n	800024c <EXTI15_10_IRQHandler+0x24>
        GPIOC->ODR ^= (1 << 15);
 8000238:	4b07      	ldr	r3, [pc, #28]	@ (8000258 <EXTI15_10_IRQHandler+0x30>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	4a06      	ldr	r2, [pc, #24]	@ (8000258 <EXTI15_10_IRQHandler+0x30>)
 800023e:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8000242:	60d3      	str	r3, [r2, #12]
        EXTI->PR = (1 << 10);
 8000244:	4b03      	ldr	r3, [pc, #12]	@ (8000254 <EXTI15_10_IRQHandler+0x2c>)
 8000246:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800024a:	615a      	str	r2, [r3, #20]
    }
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40010400 	.word	0x40010400
 8000258:	40011000 	.word	0x40011000

0800025c <main>:

int main(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
    // habilitando clock
    RCC->APB2ENR |= (1 << 3) | (1 << 4);
 8000260:	4b3a      	ldr	r3, [pc, #232]	@ (800034c <main+0xf0>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a39      	ldr	r2, [pc, #228]	@ (800034c <main+0xf0>)
 8000266:	f043 0318 	orr.w	r3, r3, #24
 800026a:	6193      	str	r3, [r2, #24]

    // Configurando PB0, PB1, PB10 como entrada e pull-up
    GPIOB->CRL &= 0xFFFFFF00;
 800026c:	4b38      	ldr	r3, [pc, #224]	@ (8000350 <main+0xf4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a37      	ldr	r2, [pc, #220]	@ (8000350 <main+0xf4>)
 8000272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000276:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= 0x00000088;
 8000278:	4b35      	ldr	r3, [pc, #212]	@ (8000350 <main+0xf4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a34      	ldr	r2, [pc, #208]	@ (8000350 <main+0xf4>)
 800027e:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8000282:	6013      	str	r3, [r2, #0]
    GPIOB->CRH &= 0xFFFFF0FF;
 8000284:	4b32      	ldr	r3, [pc, #200]	@ (8000350 <main+0xf4>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a31      	ldr	r2, [pc, #196]	@ (8000350 <main+0xf4>)
 800028a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800028e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= 0x00000800;
 8000290:	4b2f      	ldr	r3, [pc, #188]	@ (8000350 <main+0xf4>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a2e      	ldr	r2, [pc, #184]	@ (8000350 <main+0xf4>)
 8000296:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800029a:	6053      	str	r3, [r2, #4]
    GPIOB->ODR |= 0x00000403;
 800029c:	4b2c      	ldr	r3, [pc, #176]	@ (8000350 <main+0xf4>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000350 <main+0xf4>)
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002a6:	f043 0303 	orr.w	r3, r3, #3
 80002aa:	60d3      	str	r3, [r2, #12]

    // Configurando PC13, PC14, PC15 como saida
    GPIOC->CRH &= 0x000FFFFF;
 80002ac:	4b29      	ldr	r3, [pc, #164]	@ (8000354 <main+0xf8>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a28      	ldr	r2, [pc, #160]	@ (8000354 <main+0xf8>)
 80002b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80002b6:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= 0x22200000;
 80002b8:	4b26      	ldr	r3, [pc, #152]	@ (8000354 <main+0xf8>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a25      	ldr	r2, [pc, #148]	@ (8000354 <main+0xf8>)
 80002be:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80002c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002c6:	6053      	str	r3, [r2, #4]

    // Reset PC13, PC14, PC15
    GPIOC->ODR &= ~(0xE000);
 80002c8:	4b22      	ldr	r3, [pc, #136]	@ (8000354 <main+0xf8>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a21      	ldr	r2, [pc, #132]	@ (8000354 <main+0xf8>)
 80002ce:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80002d2:	60d3      	str	r3, [r2, #12]

    // Enable AFIO clock
    RCC->APB2ENR |= (1 << 0);
 80002d4:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <main+0xf0>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1c      	ldr	r2, [pc, #112]	@ (800034c <main+0xf0>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6193      	str	r3, [r2, #24]

    // Configure EXTI lines for PB0, PB1, PB10
    AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI0_PB | AFIO_EXTICR1_EXTI1_PB;
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <main+0xfc>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000358 <main+0xfc>)
 80002e6:	f043 0311 	orr.w	r3, r3, #17
 80002ea:	6093      	str	r3, [r2, #8]
    AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI10_PB;
 80002ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <main+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a19      	ldr	r2, [pc, #100]	@ (8000358 <main+0xfc>)
 80002f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f6:	6113      	str	r3, [r2, #16]

    // Enable falling edge trigger for EXTI0, EXTI1, EXTI10
    EXTI->FTSR |= (1 << 0) | (1 << 1) | (1 << 10);
 80002f8:	4b18      	ldr	r3, [pc, #96]	@ (800035c <main+0x100>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a17      	ldr	r2, [pc, #92]	@ (800035c <main+0x100>)
 80002fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000302:	f043 0303 	orr.w	r3, r3, #3
 8000306:	60d3      	str	r3, [r2, #12]

    // Unmask EXTI0, EXTI1, EXTI10
    EXTI->IMR |= (1 << 0) | (1 << 1) | (1 << 10);
 8000308:	4b14      	ldr	r3, [pc, #80]	@ (800035c <main+0x100>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a13      	ldr	r2, [pc, #76]	@ (800035c <main+0x100>)
 800030e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000312:	f043 0303 	orr.w	r3, r3, #3
 8000316:	6013      	str	r3, [r2, #0]

    // Set priority and enable EXTI0, EXTI1, EXTI15_10 interrupts in NVIC
    NVIC_SetPriority(EXTI0_IRQn, 0x10);
 8000318:	2110      	movs	r1, #16
 800031a:	2006      	movs	r0, #6
 800031c:	f7ff ff32 	bl	8000184 <__NVIC_SetPriority>
    NVIC_SetPriority(EXTI1_IRQn, 0x20);
 8000320:	2120      	movs	r1, #32
 8000322:	2007      	movs	r0, #7
 8000324:	f7ff ff2e 	bl	8000184 <__NVIC_SetPriority>
    NVIC_SetPriority(EXTI15_10_IRQn, 0x30);
 8000328:	2130      	movs	r1, #48	@ 0x30
 800032a:	2028      	movs	r0, #40	@ 0x28
 800032c:	f7ff ff2a 	bl	8000184 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000330:	2006      	movs	r0, #6
 8000332:	f7ff ff0b 	bl	800014c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI1_IRQn);
 8000336:	2007      	movs	r0, #7
 8000338:	f7ff ff08 	bl	800014c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800033c:	2028      	movs	r0, #40	@ 0x28
 800033e:	f7ff ff05 	bl	800014c <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000342:	b662      	cpsie	i
}
 8000344:	bf00      	nop

    __enable_irq();

    while(1){
 8000346:	bf00      	nop
 8000348:	e7fd      	b.n	8000346 <main+0xea>
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40010c00 	.word	0x40010c00
 8000354:	40011000 	.word	0x40011000
 8000358:	40010000 	.word	0x40010000
 800035c:	40010400 	.word	0x40010400

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <NMI_Handler+0x4>

08000368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <UsageFault_Handler+0x4>

08000388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b0:	f000 f82e 	bl	8000410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003c4:	f7ff fff8 	bl	80003b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480b      	ldr	r0, [pc, #44]	@ (80003f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003ca:	490c      	ldr	r1, [pc, #48]	@ (80003fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000400 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a09      	ldr	r2, [pc, #36]	@ (8000404 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003e0:	4c09      	ldr	r4, [pc, #36]	@ (8000408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ee:	f000 f821 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ff33 	bl	800025c <main>
  bx lr
 80003f6:	4770      	bx	lr
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000400:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 8000404:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000408:	20000024 	.word	0x20000024

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000414:	4b05      	ldr	r3, [pc, #20]	@ (800042c <HAL_IncTick+0x1c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <HAL_IncTick+0x20>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4413      	add	r3, r2
 8000420:	4a03      	ldr	r2, [pc, #12]	@ (8000430 <HAL_IncTick+0x20>)
 8000422:	6013      	str	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	2600      	movs	r6, #0
 8000438:	4d0c      	ldr	r5, [pc, #48]	@ (800046c <__libc_init_array+0x38>)
 800043a:	4c0d      	ldr	r4, [pc, #52]	@ (8000470 <__libc_init_array+0x3c>)
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	f000 f81a 	bl	800047c <_init>
 8000448:	2600      	movs	r6, #0
 800044a:	4d0a      	ldr	r5, [pc, #40]	@ (8000474 <__libc_init_array+0x40>)
 800044c:	4c0a      	ldr	r4, [pc, #40]	@ (8000478 <__libc_init_array+0x44>)
 800044e:	1b64      	subs	r4, r4, r5
 8000450:	10a4      	asrs	r4, r4, #2
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
