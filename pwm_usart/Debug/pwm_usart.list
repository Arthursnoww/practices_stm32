
pwm_usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000828  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000934  08000934  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000934  08000934  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000934  08000934  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000934  08000934  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000934  08000934  00001934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000938  08000938  00001938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800093c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000004  08000940  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000940  00002044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012cd  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e8  00000000  00000000  000032fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  000038e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000171  00000000  00000000  00003af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015292  00000000  00000000  00003c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fd2  00000000  00000000  00018ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b3cc  00000000  00000000  0001aec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096291  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000648  00000000  00000000  000962d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0009691c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800091c 	.word	0x0800091c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800091c 	.word	0x0800091c

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <main>:
void timer2Config();
void resetDemoMode();
void updateColorSequence();
void uart_write(char ch);

int main(void){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
    // Inicialização de clocks, GPIOs, USART, e timers
    RCCEnable();
 8000188:	f000 fa30 	bl	80005ec <RCCEnable>
    GPIOConfig();
 800018c:	f000 fa3e 	bl	800060c <GPIOConfig>
    USART1Config();
 8000190:	f000 fa06 	bl	80005a0 <USART1Config>
    Timer3Config();
 8000194:	f000 fb00 	bl	8000798 <Timer3Config>
    timer2Config();
 8000198:	f000 fa72 	bl	8000680 <timer2Config>

    // Loop principal do programa
    while (1){
        if (MAIN_SM){ // Verifica se um novo comando foi recebido
 800019c:	4b74      	ldr	r3, [pc, #464]	@ (8000370 <main+0x1ec>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d0fb      	beq.n	800019c <main+0x18>
            MAIN_SM = 0; // Reinicia o estado da máquina de estados
 80001a4:	4b72      	ldr	r3, [pc, #456]	@ (8000370 <main+0x1ec>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
            if (demoMode){ // Verifica se está no modo demo
 80001aa:	4b72      	ldr	r3, [pc, #456]	@ (8000374 <main+0x1f0>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d01c      	beq.n	80001ec <main+0x68>
                if (command[0] == 'd' || command[0] == 'D'){
 80001b2:	4b71      	ldr	r3, [pc, #452]	@ (8000378 <main+0x1f4>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b64      	cmp	r3, #100	@ 0x64
 80001b8:	d003      	beq.n	80001c2 <main+0x3e>
 80001ba:	4b6f      	ldr	r3, [pc, #444]	@ (8000378 <main+0x1f4>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b44      	cmp	r3, #68	@ 0x44
 80001c0:	d1ec      	bne.n	800019c <main+0x18>
                    resetDemoMode(); // Reseta as configurações do modo demo
 80001c2:	f000 f8df 	bl	8000384 <resetDemoMode>
                    TIM2->CR1 &= ~TIM_CR1_CEN; // Desativa o timer 2
 80001c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	6013      	str	r3, [r2, #0]
                    demoMode = !demoMode; // Alterna o modo demo
 80001d6:	4b67      	ldr	r3, [pc, #412]	@ (8000374 <main+0x1f0>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	bf0c      	ite	eq
 80001de:	2301      	moveq	r3, #1
 80001e0:	2300      	movne	r3, #0
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b63      	ldr	r3, [pc, #396]	@ (8000374 <main+0x1f0>)
 80001e8:	701a      	strb	r2, [r3, #0]
 80001ea:	e7d7      	b.n	800019c <main+0x18>
                }
            }
            else{ // Caso não esteja no modo demo, verifica o comando para ajustar o PWM
                switch (command[0])
 80001ec:	4b62      	ldr	r3, [pc, #392]	@ (8000378 <main+0x1f4>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	3b42      	subs	r3, #66	@ 0x42
 80001f2:	2b30      	cmp	r3, #48	@ 0x30
 80001f4:	d8d2      	bhi.n	800019c <main+0x18>
 80001f6:	a201      	add	r2, pc, #4	@ (adr r2, 80001fc <main+0x78>)
 80001f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fc:	08000319 	.word	0x08000319
 8000200:	0800019d 	.word	0x0800019d
 8000204:	08000345 	.word	0x08000345
 8000208:	0800019d 	.word	0x0800019d
 800020c:	0800019d 	.word	0x0800019d
 8000210:	080002ed 	.word	0x080002ed
 8000214:	0800019d 	.word	0x0800019d
 8000218:	0800019d 	.word	0x0800019d
 800021c:	0800019d 	.word	0x0800019d
 8000220:	0800019d 	.word	0x0800019d
 8000224:	0800019d 	.word	0x0800019d
 8000228:	0800019d 	.word	0x0800019d
 800022c:	0800019d 	.word	0x0800019d
 8000230:	0800019d 	.word	0x0800019d
 8000234:	0800019d 	.word	0x0800019d
 8000238:	0800019d 	.word	0x0800019d
 800023c:	080002c1 	.word	0x080002c1
 8000240:	0800019d 	.word	0x0800019d
 8000244:	0800019d 	.word	0x0800019d
 8000248:	0800019d 	.word	0x0800019d
 800024c:	0800019d 	.word	0x0800019d
 8000250:	0800019d 	.word	0x0800019d
 8000254:	0800019d 	.word	0x0800019d
 8000258:	0800019d 	.word	0x0800019d
 800025c:	0800019d 	.word	0x0800019d
 8000260:	0800019d 	.word	0x0800019d
 8000264:	0800019d 	.word	0x0800019d
 8000268:	0800019d 	.word	0x0800019d
 800026c:	0800019d 	.word	0x0800019d
 8000270:	0800019d 	.word	0x0800019d
 8000274:	0800019d 	.word	0x0800019d
 8000278:	0800019d 	.word	0x0800019d
 800027c:	08000319 	.word	0x08000319
 8000280:	0800019d 	.word	0x0800019d
 8000284:	08000345 	.word	0x08000345
 8000288:	0800019d 	.word	0x0800019d
 800028c:	0800019d 	.word	0x0800019d
 8000290:	080002ed 	.word	0x080002ed
 8000294:	0800019d 	.word	0x0800019d
 8000298:	0800019d 	.word	0x0800019d
 800029c:	0800019d 	.word	0x0800019d
 80002a0:	0800019d 	.word	0x0800019d
 80002a4:	0800019d 	.word	0x0800019d
 80002a8:	0800019d 	.word	0x0800019d
 80002ac:	0800019d 	.word	0x0800019d
 80002b0:	0800019d 	.word	0x0800019d
 80002b4:	0800019d 	.word	0x0800019d
 80002b8:	0800019d 	.word	0x0800019d
 80002bc:	080002c1 	.word	0x080002c1
                {
                case 'R': // Ajusta o PWM do canal vermelho
                case 'r':
                    duty_cycle = (command[1] - '0') * 10 + (command[2] - '0');
 80002c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <main+0x1f4>)
 80002c2:	785b      	ldrb	r3, [r3, #1]
 80002c4:	3b30      	subs	r3, #48	@ 0x30
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	461a      	mov	r2, r3
 80002ca:	0092      	lsls	r2, r2, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4b29      	ldr	r3, [pc, #164]	@ (8000378 <main+0x1f4>)
 80002d4:	789b      	ldrb	r3, [r3, #2]
 80002d6:	4413      	add	r3, r2
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	3b30      	subs	r3, #48	@ 0x30
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b27      	ldr	r3, [pc, #156]	@ (800037c <main+0x1f8>)
 80002e0:	701a      	strb	r2, [r3, #0]
                    TIM3->CCR1 = duty_cycle; // Define o ciclo de trabalho no canal 1 (vermelho)
 80002e2:	4b26      	ldr	r3, [pc, #152]	@ (800037c <main+0x1f8>)
 80002e4:	781a      	ldrb	r2, [r3, #0]
 80002e6:	4b26      	ldr	r3, [pc, #152]	@ (8000380 <main+0x1fc>)
 80002e8:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 80002ea:	e03f      	b.n	800036c <main+0x1e8>

                case 'G': // Ajusta o PWM do canal verde
                case 'g':
                    duty_cycle = (command[1] - '0') * 10 + (command[2] - '0');
 80002ec:	4b22      	ldr	r3, [pc, #136]	@ (8000378 <main+0x1f4>)
 80002ee:	785b      	ldrb	r3, [r3, #1]
 80002f0:	3b30      	subs	r3, #48	@ 0x30
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	461a      	mov	r2, r3
 80002f6:	0092      	lsls	r2, r2, #2
 80002f8:	4413      	add	r3, r2
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <main+0x1f4>)
 8000300:	789b      	ldrb	r3, [r3, #2]
 8000302:	4413      	add	r3, r2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	3b30      	subs	r3, #48	@ 0x30
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b1c      	ldr	r3, [pc, #112]	@ (800037c <main+0x1f8>)
 800030c:	701a      	strb	r2, [r3, #0]
                    TIM3->CCR2 = duty_cycle; // Define o ciclo de trabalho no canal 2 (verde)
 800030e:	4b1b      	ldr	r3, [pc, #108]	@ (800037c <main+0x1f8>)
 8000310:	781a      	ldrb	r2, [r3, #0]
 8000312:	4b1b      	ldr	r3, [pc, #108]	@ (8000380 <main+0x1fc>)
 8000314:	639a      	str	r2, [r3, #56]	@ 0x38
                    break;
 8000316:	e029      	b.n	800036c <main+0x1e8>

                case 'B': // Ajusta o PWM do canal azul
                case 'b':
                    duty_cycle = (command[1] - '0') * 10 + (command[2] - '0');
 8000318:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <main+0x1f4>)
 800031a:	785b      	ldrb	r3, [r3, #1]
 800031c:	3b30      	subs	r3, #48	@ 0x30
 800031e:	b2db      	uxtb	r3, r3
 8000320:	461a      	mov	r2, r3
 8000322:	0092      	lsls	r2, r2, #2
 8000324:	4413      	add	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <main+0x1f4>)
 800032c:	789b      	ldrb	r3, [r3, #2]
 800032e:	4413      	add	r3, r2
 8000330:	b2db      	uxtb	r3, r3
 8000332:	3b30      	subs	r3, #48	@ 0x30
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b11      	ldr	r3, [pc, #68]	@ (800037c <main+0x1f8>)
 8000338:	701a      	strb	r2, [r3, #0]
                    TIM3->CCR3 = duty_cycle; // Define o ciclo de trabalho no canal 3 (azul)
 800033a:	4b10      	ldr	r3, [pc, #64]	@ (800037c <main+0x1f8>)
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <main+0x1fc>)
 8000340:	63da      	str	r2, [r3, #60]	@ 0x3c
                    break;
 8000342:	e013      	b.n	800036c <main+0x1e8>

                case 'd': // Ativa/desativa o modo demo
                case 'D':
                    demoMode = !demoMode;
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <main+0x1f0>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	bf0c      	ite	eq
 800034c:	2301      	moveq	r3, #1
 800034e:	2300      	movne	r3, #0
 8000350:	b2db      	uxtb	r3, r3
 8000352:	461a      	mov	r2, r3
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <main+0x1f0>)
 8000356:	701a      	strb	r2, [r3, #0]
                    TIM2->CR1 |= TIM_CR1_CEN; // Ativa o timer 2
 8000358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6013      	str	r3, [r2, #0]
                    break;
 8000368:	bf00      	nop
 800036a:	e717      	b.n	800019c <main+0x18>
        if (MAIN_SM){ // Verifica se um novo comando foi recebido
 800036c:	e716      	b.n	800019c <main+0x18>
 800036e:	bf00      	nop
 8000370:	2000002a 	.word	0x2000002a
 8000374:	2000002c 	.word	0x2000002c
 8000378:	20000024 	.word	0x20000024
 800037c:	2000002b 	.word	0x2000002b
 8000380:	40000400 	.word	0x40000400

08000384 <resetDemoMode>:
        }
    }
}

// Função para resetar as configurações do modo demo
void resetDemoMode(){
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
    red = 0;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <resetDemoMode+0x44>)
 800038a:	2200      	movs	r2, #0
 800038c:	801a      	strh	r2, [r3, #0]
    blue = 0;
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <resetDemoMode+0x48>)
 8000390:	2200      	movs	r2, #0
 8000392:	801a      	strh	r2, [r3, #0]
    green = 0;
 8000394:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <resetDemoMode+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	801a      	strh	r2, [r3, #0]
    colorIndex = 0;
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <resetDemoMode+0x50>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
    increasing = 1;
 80003a0:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <resetDemoMode+0x54>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
    brightness = 0;
 80003a6:	4b0d      	ldr	r3, [pc, #52]	@ (80003dc <resetDemoMode+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	801a      	strh	r2, [r3, #0]
    TIM3->CCR1 = 0; // Desativa o PWM do canal 1 (vermelho)
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <resetDemoMode+0x5c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0; // Desativa o PWM do canal 2 (verde)
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <resetDemoMode+0x5c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 0; // Desativa o PWM do canal 3 (azul)
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <resetDemoMode+0x5c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	2000002e 	.word	0x2000002e
 80003cc:	20000032 	.word	0x20000032
 80003d0:	20000030 	.word	0x20000030
 80003d4:	20000034 	.word	0x20000034
 80003d8:	20000000 	.word	0x20000000
 80003dc:	20000036 	.word	0x20000036
 80003e0:	40000400 	.word	0x40000400

080003e4 <updateColorSequence>:

// Função para atualizar a sequência de cores no modo demo
void updateColorSequence(){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
    // Controla o ciclo de aumento e diminuição de brilho (PWM)
    static uint8_t step = 1;

    if (increasing){ // Se o brilho está aumentando
 80003e8:	4b59      	ldr	r3, [pc, #356]	@ (8000550 <updateColorSequence+0x16c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d010      	beq.n	8000414 <updateColorSequence+0x30>
        brightness += step;
 80003f2:	4b58      	ldr	r3, [pc, #352]	@ (8000554 <updateColorSequence+0x170>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b57      	ldr	r3, [pc, #348]	@ (8000558 <updateColorSequence+0x174>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	4413      	add	r3, r2
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b55      	ldr	r3, [pc, #340]	@ (8000558 <updateColorSequence+0x174>)
 8000402:	801a      	strh	r2, [r3, #0]
        if (brightness >= 100) // Se o brilho atingir o máximo, inverte o ciclo
 8000404:	4b54      	ldr	r3, [pc, #336]	@ (8000558 <updateColorSequence+0x174>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	2b63      	cmp	r3, #99	@ 0x63
 800040a:	d924      	bls.n	8000456 <updateColorSequence+0x72>
            increasing = 0;
 800040c:	4b50      	ldr	r3, [pc, #320]	@ (8000550 <updateColorSequence+0x16c>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	e020      	b.n	8000456 <updateColorSequence+0x72>
    } else { // Se o brilho está diminuindo
        brightness -= step;
 8000414:	4b50      	ldr	r3, [pc, #320]	@ (8000558 <updateColorSequence+0x174>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	4a4e      	ldr	r2, [pc, #312]	@ (8000554 <updateColorSequence+0x170>)
 800041a:	7812      	ldrb	r2, [r2, #0]
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	b29a      	uxth	r2, r3
 8000420:	4b4d      	ldr	r3, [pc, #308]	@ (8000558 <updateColorSequence+0x174>)
 8000422:	801a      	strh	r2, [r3, #0]
        if (brightness == 0){ // Quando atingir o mínimo, avança para a próxima cor
 8000424:	4b4c      	ldr	r3, [pc, #304]	@ (8000558 <updateColorSequence+0x174>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d114      	bne.n	8000456 <updateColorSequence+0x72>
            increasing = 1;
 800042c:	4b48      	ldr	r3, [pc, #288]	@ (8000550 <updateColorSequence+0x16c>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
            colorIndex = (colorIndex + 1) % 7; // Cicla entre 7 cores
 8000432:	4b4a      	ldr	r3, [pc, #296]	@ (800055c <updateColorSequence+0x178>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	4b49      	ldr	r3, [pc, #292]	@ (8000560 <updateColorSequence+0x17c>)
 800043c:	fb83 1302 	smull	r1, r3, r3, r2
 8000440:	4413      	add	r3, r2
 8000442:	1099      	asrs	r1, r3, #2
 8000444:	17d3      	asrs	r3, r2, #31
 8000446:	1ac9      	subs	r1, r1, r3
 8000448:	460b      	mov	r3, r1
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	1ad1      	subs	r1, r2, r3
 8000450:	b2ca      	uxtb	r2, r1
 8000452:	4b42      	ldr	r3, [pc, #264]	@ (800055c <updateColorSequence+0x178>)
 8000454:	701a      	strb	r2, [r3, #0]
        }
    }

    // Define as cores de acordo com o índice
    switch (colorIndex)
 8000456:	4b41      	ldr	r3, [pc, #260]	@ (800055c <updateColorSequence+0x178>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b06      	cmp	r3, #6
 800045e:	d863      	bhi.n	8000528 <updateColorSequence+0x144>
 8000460:	a201      	add	r2, pc, #4	@ (adr r2, 8000468 <updateColorSequence+0x84>)
 8000462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000466:	bf00      	nop
 8000468:	08000485 	.word	0x08000485
 800046c:	0800049b 	.word	0x0800049b
 8000470:	080004b1 	.word	0x080004b1
 8000474:	080004c7 	.word	0x080004c7
 8000478:	080004df 	.word	0x080004df
 800047c:	080004f7 	.word	0x080004f7
 8000480:	0800050f 	.word	0x0800050f
    {
    case 0: // Vermelho
        red = brightness;
 8000484:	4b34      	ldr	r3, [pc, #208]	@ (8000558 <updateColorSequence+0x174>)
 8000486:	881a      	ldrh	r2, [r3, #0]
 8000488:	4b36      	ldr	r3, [pc, #216]	@ (8000564 <updateColorSequence+0x180>)
 800048a:	801a      	strh	r2, [r3, #0]
        green = 0;
 800048c:	4b36      	ldr	r3, [pc, #216]	@ (8000568 <updateColorSequence+0x184>)
 800048e:	2200      	movs	r2, #0
 8000490:	801a      	strh	r2, [r3, #0]
        blue = 0;
 8000492:	4b36      	ldr	r3, [pc, #216]	@ (800056c <updateColorSequence+0x188>)
 8000494:	2200      	movs	r2, #0
 8000496:	801a      	strh	r2, [r3, #0]
        break;
 8000498:	e046      	b.n	8000528 <updateColorSequence+0x144>
    case 1: // Verde
        red = 0;
 800049a:	4b32      	ldr	r3, [pc, #200]	@ (8000564 <updateColorSequence+0x180>)
 800049c:	2200      	movs	r2, #0
 800049e:	801a      	strh	r2, [r3, #0]
        green = brightness;
 80004a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000558 <updateColorSequence+0x174>)
 80004a2:	881a      	ldrh	r2, [r3, #0]
 80004a4:	4b30      	ldr	r3, [pc, #192]	@ (8000568 <updateColorSequence+0x184>)
 80004a6:	801a      	strh	r2, [r3, #0]
        blue = 0;
 80004a8:	4b30      	ldr	r3, [pc, #192]	@ (800056c <updateColorSequence+0x188>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	801a      	strh	r2, [r3, #0]
        break;
 80004ae:	e03b      	b.n	8000528 <updateColorSequence+0x144>
    case 2: // Azul
        red = 0;
 80004b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000564 <updateColorSequence+0x180>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	801a      	strh	r2, [r3, #0]
        green = 0;
 80004b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000568 <updateColorSequence+0x184>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 80004bc:	4b26      	ldr	r3, [pc, #152]	@ (8000558 <updateColorSequence+0x174>)
 80004be:	881a      	ldrh	r2, [r3, #0]
 80004c0:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <updateColorSequence+0x188>)
 80004c2:	801a      	strh	r2, [r3, #0]
        break;
 80004c4:	e030      	b.n	8000528 <updateColorSequence+0x144>
    case 3: // Amarelo
        red = brightness;
 80004c6:	4b24      	ldr	r3, [pc, #144]	@ (8000558 <updateColorSequence+0x174>)
 80004c8:	881a      	ldrh	r2, [r3, #0]
 80004ca:	4b26      	ldr	r3, [pc, #152]	@ (8000564 <updateColorSequence+0x180>)
 80004cc:	801a      	strh	r2, [r3, #0]
        green = brightness;
 80004ce:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <updateColorSequence+0x174>)
 80004d0:	881a      	ldrh	r2, [r3, #0]
 80004d2:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <updateColorSequence+0x184>)
 80004d4:	801a      	strh	r2, [r3, #0]
        blue = 0;
 80004d6:	4b25      	ldr	r3, [pc, #148]	@ (800056c <updateColorSequence+0x188>)
 80004d8:	2200      	movs	r2, #0
 80004da:	801a      	strh	r2, [r3, #0]
        break;
 80004dc:	e024      	b.n	8000528 <updateColorSequence+0x144>
    case 4: // Ciano
        red = 0;
 80004de:	4b21      	ldr	r3, [pc, #132]	@ (8000564 <updateColorSequence+0x180>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	801a      	strh	r2, [r3, #0]
        green = brightness;
 80004e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <updateColorSequence+0x174>)
 80004e6:	881a      	ldrh	r2, [r3, #0]
 80004e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000568 <updateColorSequence+0x184>)
 80004ea:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <updateColorSequence+0x174>)
 80004ee:	881a      	ldrh	r2, [r3, #0]
 80004f0:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <updateColorSequence+0x188>)
 80004f2:	801a      	strh	r2, [r3, #0]
        break;
 80004f4:	e018      	b.n	8000528 <updateColorSequence+0x144>
    case 5: // Roxo
        red = brightness;
 80004f6:	4b18      	ldr	r3, [pc, #96]	@ (8000558 <updateColorSequence+0x174>)
 80004f8:	881a      	ldrh	r2, [r3, #0]
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <updateColorSequence+0x180>)
 80004fc:	801a      	strh	r2, [r3, #0]
        green = 0;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <updateColorSequence+0x184>)
 8000500:	2200      	movs	r2, #0
 8000502:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <updateColorSequence+0x174>)
 8000506:	881a      	ldrh	r2, [r3, #0]
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <updateColorSequence+0x188>)
 800050a:	801a      	strh	r2, [r3, #0]
        break;
 800050c:	e00c      	b.n	8000528 <updateColorSequence+0x144>
    case 6: // Branco
        red = brightness;
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <updateColorSequence+0x174>)
 8000510:	881a      	ldrh	r2, [r3, #0]
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <updateColorSequence+0x180>)
 8000514:	801a      	strh	r2, [r3, #0]
        green = brightness;
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <updateColorSequence+0x174>)
 8000518:	881a      	ldrh	r2, [r3, #0]
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <updateColorSequence+0x184>)
 800051c:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <updateColorSequence+0x174>)
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <updateColorSequence+0x188>)
 8000524:	801a      	strh	r2, [r3, #0]
        break;
 8000526:	bf00      	nop
    }

    // Atualiza os valores PWM
    TIM3->CCR1 = red;   // Atualiza o canal 1 com o valor de vermelho
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <updateColorSequence+0x180>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	b29a      	uxth	r2, r3
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <updateColorSequence+0x18c>)
 8000530:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = green; // Atualiza o canal 2 com o valor de verde
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <updateColorSequence+0x184>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <updateColorSequence+0x18c>)
 800053a:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = blue;  // Atualiza o canal 3 com o valor de azul
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <updateColorSequence+0x188>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <updateColorSequence+0x18c>)
 8000544:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000001 	.word	0x20000001
 8000558:	20000036 	.word	0x20000036
 800055c:	20000034 	.word	0x20000034
 8000560:	92492493 	.word	0x92492493
 8000564:	2000002e 	.word	0x2000002e
 8000568:	20000030 	.word	0x20000030
 800056c:	20000032 	.word	0x20000032
 8000570:	40000400 	.word	0x40000400

08000574 <uart_write>:

// Função para enviar um caractere via UART
void uart_write(char ch){
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
    // Espera até que o registrador de transmissão esteja vazio
    while (!(USART1->SR & USART_SR_TXE))
 800057e:	bf00      	nop
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <uart_write+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0f9      	beq.n	8000580 <uart_write+0xc>
    {
    }
    // Envia o caractere pelo registrador de dados
    USART1->DR = (ch & 0xFF);
 800058c:	4a03      	ldr	r2, [pc, #12]	@ (800059c <uart_write+0x28>)
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	6053      	str	r3, [r2, #4]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40013800 	.word	0x40013800

080005a0 <USART1Config>:

// Configuração da USART1
void USART1Config(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    // Habilita o clock da USART1
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <USART1Config+0x44>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <USART1Config+0x44>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6193      	str	r3, [r2, #24]
    // Habilita o receptor (RE) e transmissor (TE)
    USART1->CR1 |= USART_CR1_RE | USART_CR1_TE;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <USART1Config+0x48>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a0c      	ldr	r2, [pc, #48]	@ (80005e8 <USART1Config+0x48>)
 80005b6:	f043 030c 	orr.w	r3, r3, #12
 80005ba:	60d3      	str	r3, [r2, #12]
    // Configura a taxa de baud rate
    USART1->BRR = ((CPU_CLK + (BaudRate / 2U)) / BaudRate);
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <USART1Config+0x48>)
 80005be:	2245      	movs	r2, #69	@ 0x45
 80005c0:	609a      	str	r2, [r3, #8]
    // Habilita a interrupção RXNE para receber dados
    USART1->CR1 |= USART_CR1_RXNEIE;
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <USART1Config+0x48>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <USART1Config+0x48>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	60d3      	str	r3, [r2, #12]
    // Habilita a interrupção da USART1 no NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 80005ce:	2025      	movs	r0, #37	@ 0x25
 80005d0:	f7ff fdbc 	bl	800014c <__NVIC_EnableIRQ>
    // Habilita a USART1
    USART1->CR1 |= USART_CR1_UE;
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <USART1Config+0x48>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <USART1Config+0x48>)
 80005da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40013800 	.word	0x40013800

080005ec <RCCEnable>:

// Habilitação dos clocks necessários para GPIO e USART
void RCCEnable(){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_USART1EN;
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <RCCEnable+0x1c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <RCCEnable+0x1c>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	f043 030c 	orr.w	r3, r3, #12
 80005fe:	6193      	str	r3, [r2, #24]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000

0800060c <GPIOConfig>:

// Configuração dos pinos GPIO para UART e PWM
void GPIOConfig(){
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
    // Configura PA9 como TX (transmissão UART)
    GPIOA->CRH &= 0xFFFFFF0F;
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <GPIOConfig+0x6c>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4a18      	ldr	r2, [pc, #96]	@ (8000678 <GPIOConfig+0x6c>)
 8000616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800061a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x000000B0;
 800061c:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <GPIOConfig+0x6c>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <GPIOConfig+0x6c>)
 8000622:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000626:	6053      	str	r3, [r2, #4]
    // Configura PA10 como RX (recepção UART)
    GPIOA->CRH &= 0xFFFFF0FF;
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <GPIOConfig+0x6c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <GPIOConfig+0x6c>)
 800062e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000632:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x00000400;
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <GPIOConfig+0x6c>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <GPIOConfig+0x6c>)
 800063a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800063e:	6053      	str	r3, [r2, #4]

    // Configura PA6 (PWM), PA7 (PWM) e PB0 (PWM)
    GPIOA->CRL &= 0x00FFFFFF;
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <GPIOConfig+0x6c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <GPIOConfig+0x6c>)
 8000646:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800064a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= 0xBB000000;
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <GPIOConfig+0x6c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <GPIOConfig+0x6c>)
 8000652:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 8000656:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= 0xFFFFFFF0;
 8000658:	4b08      	ldr	r3, [pc, #32]	@ (800067c <GPIOConfig+0x70>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	@ (800067c <GPIOConfig+0x70>)
 800065e:	f023 030f 	bic.w	r3, r3, #15
 8000662:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= 0x0000000B;
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <GPIOConfig+0x70>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <GPIOConfig+0x70>)
 800066a:	f043 030b 	orr.w	r3, r3, #11
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00

08000680 <timer2Config>:

// Configuração do Timer 2 para controle no modo demo
void timer2Config(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Habilita o clock do TIM2
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <timer2Config+0x3c>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <timer2Config+0x3c>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	61d3      	str	r3, [r2, #28]

    TIM2->PSC = 8000 - 1;  // Prescaler para diminuir a frequência
 8000690:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000694:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 20 - 1;    // Tempo de auto-reload de 20ms
 800069a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800069e:	2213      	movs	r2, #19
 80006a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->DIER |= TIM_DIER_UIE;  // Habilita a interrupção de atualização do TIM2
 80006a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);   // Ativa a interrupção no NVIC
 80006b2:	201c      	movs	r0, #28
 80006b4:	f7ff fd4a 	bl	800014c <__NVIC_EnableIRQ>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <TIM2_IRQHandler>:

// Interrupção do Timer 2 para controle do modo demo
void TIM2_IRQHandler(void){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF){
 80006c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d009      	beq.n	80006e6 <TIM2_IRQHandler+0x26>
        TIM2->SR &= ~TIM_SR_UIF; // Limpa a flag de interrupção
 80006d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	6113      	str	r3, [r2, #16]
        updateColorSequence();   // Atualiza a sequência de cores no modo demo
 80006e2:	f7ff fe7f 	bl	80003e4 <updateColorSequence>
    }
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <USART1_IRQHandler>:

// Interrupção da USART1 para tratar a recepção de dados
int i = 0;
void USART1_IRQHandler(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    if ((USART1->SR & USART_SR_RXNE)){ // Verifica se um caractere foi recebido
 80006f0:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <USART1_IRQHandler+0x94>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d022      	beq.n	8000742 <USART1_IRQHandler+0x56>
        ch = USART1->DR; // Lê o caractere recebido
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <USART1_IRQHandler+0x94>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <USART1_IRQHandler+0x98>)
 8000704:	701a      	strb	r2, [r3, #0]
        uart_write(ch);  // Envia de volta o caractere recebido (eco)
 8000706:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <USART1_IRQHandler+0x98>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff32 	bl	8000574 <uart_write>
        if (ch != '\r'){ // Se não for um caractere de nova linha, armazena o comando
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <USART1_IRQHandler+0x98>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b0d      	cmp	r3, #13
 8000716:	d009      	beq.n	800072c <USART1_IRQHandler+0x40>
            command[i++] = ch;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <USART1_IRQHandler+0x9c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	491a      	ldr	r1, [pc, #104]	@ (8000788 <USART1_IRQHandler+0x9c>)
 8000720:	600a      	str	r2, [r1, #0]
 8000722:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <USART1_IRQHandler+0x98>)
 8000724:	7811      	ldrb	r1, [r2, #0]
 8000726:	4a19      	ldr	r2, [pc, #100]	@ (800078c <USART1_IRQHandler+0xa0>)
 8000728:	54d1      	strb	r1, [r2, r3]
 800072a:	e00a      	b.n	8000742 <USART1_IRQHandler+0x56>
        } else { // Se for uma nova linha, processa o comando
            command[i] = '\0'; // Finaliza o comando com NULL
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <USART1_IRQHandler+0x9c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a16      	ldr	r2, [pc, #88]	@ (800078c <USART1_IRQHandler+0xa0>)
 8000732:	2100      	movs	r1, #0
 8000734:	54d1      	strb	r1, [r2, r3]
            MAIN_SM = 1; // Define o estado para processar o comando
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <USART1_IRQHandler+0xa4>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
            i = 0; // Reinicia o índice do comando
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <USART1_IRQHandler+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
        }
    }
    if ((USART1->SR & USART_SR_TXE)){ // Se estiver pronto para enviar
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <USART1_IRQHandler+0x94>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074a:	2b00      	cmp	r3, #0
 800074c:	d015      	beq.n	800077a <USART1_IRQHandler+0x8e>
        if (*ptr){
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <USART1_IRQHandler+0xa8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <USART1_IRQHandler+0x82>
            USART1->DR = (*ptr & 0xFF); // Envia o próximo caractere
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <USART1_IRQHandler+0xa8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <USART1_IRQHandler+0x94>)
 8000760:	605a      	str	r2, [r3, #4]
            ptr++;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <USART1_IRQHandler+0xa8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <USART1_IRQHandler+0xa8>)
 800076a:	6013      	str	r3, [r2, #0]
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE; // Desabilita a interrupção de transmissão
        }
    }
}
 800076c:	e005      	b.n	800077a <USART1_IRQHandler+0x8e>
            USART1->CR1 &= ~USART_CR1_TXEIE; // Desabilita a interrupção de transmissão
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <USART1_IRQHandler+0x94>)
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	4a03      	ldr	r2, [pc, #12]	@ (8000780 <USART1_IRQHandler+0x94>)
 8000774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000778:	60d3      	str	r3, [r2, #12]
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40013800 	.word	0x40013800
 8000784:	20000020 	.word	0x20000020
 8000788:	2000003c 	.word	0x2000003c
 800078c:	20000024 	.word	0x20000024
 8000790:	2000002a 	.word	0x2000002a
 8000794:	20000038 	.word	0x20000038

08000798 <Timer3Config>:

// Configuração do Timer 3 para gerar PWM para as cores RGB
void Timer3Config(){
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 0); // Habilita o clock AFIO
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <Timer3Config+0x5c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <Timer3Config+0x5c>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6193      	str	r3, [r2, #24]
    AFIO->MAPR &= (0x00 << 10); // Configuração dos pinos (A6, A7 e B0)
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <Timer3Config+0x60>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <Timer3Config+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]

    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // Habilita o clock do Timer 3
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <Timer3Config+0x5c>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <Timer3Config+0x5c>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	61d3      	str	r3, [r2, #28]

    TIM3->PSC = 0; // Prescaler para definir a frequência do PWM
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <Timer3Config+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 100; // Resolução do ciclo de trabalho (0-100%)
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <Timer3Config+0x64>)
 80007c6:	2264      	movs	r2, #100	@ 0x64
 80007c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configuração dos canais de captura/compare para gerar PWM
    TIM3->CCMR1 = 0x6060; // Configuração para os canais 1 e 2 (A6 e A7)
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <Timer3Config+0x64>)
 80007cc:	f246 0260 	movw	r2, #24672	@ 0x6060
 80007d0:	619a      	str	r2, [r3, #24]
    TIM3->CCMR2 = 0x0060; // Configuração para o canal 3 (B0)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <Timer3Config+0x64>)
 80007d4:	2260      	movs	r2, #96	@ 0x60
 80007d6:	61da      	str	r2, [r3, #28]
    TIM3->CCER = 0x0111;  // Habilita os canais 1, 2, e 3
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <Timer3Config+0x64>)
 80007da:	f240 1211 	movw	r2, #273	@ 0x111
 80007de:	621a      	str	r2, [r3, #32]
    TIM3->CR1 |= (1 << 0); // Ativa o Timer 3
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <Timer3Config+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a05      	ldr	r2, [pc, #20]	@ (80007fc <Timer3Config+0x64>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010000 	.word	0x40010000
 80007fc:	40000400 	.word	0x40000400

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <UsageFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f82e 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000864:	f7ff fff8 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480b      	ldr	r0, [pc, #44]	@ (8000898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800086a:	490c      	ldr	r1, [pc, #48]	@ (800089c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800086c:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a09      	ldr	r2, [pc, #36]	@ (80008a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000880:	4c09      	ldr	r4, [pc, #36]	@ (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088e:	f000 f821 	bl	80008d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fc77 	bl	8000184 <main>
  bx lr
 8000896:	4770      	bx	lr
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008a0:	0800093c 	.word	0x0800093c
  ldr r2, =_sbss
 80008a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008a8:	20000044 	.word	0x20000044

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>
	...

080008b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <HAL_IncTick+0x1c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <HAL_IncTick+0x20>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a03      	ldr	r2, [pc, #12]	@ (80008d0 <HAL_IncTick+0x20>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	20000002 	.word	0x20000002
 80008d0:	20000040 	.word	0x20000040

080008d4 <__libc_init_array>:
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	2600      	movs	r6, #0
 80008d8:	4d0c      	ldr	r5, [pc, #48]	@ (800090c <__libc_init_array+0x38>)
 80008da:	4c0d      	ldr	r4, [pc, #52]	@ (8000910 <__libc_init_array+0x3c>)
 80008dc:	1b64      	subs	r4, r4, r5
 80008de:	10a4      	asrs	r4, r4, #2
 80008e0:	42a6      	cmp	r6, r4
 80008e2:	d109      	bne.n	80008f8 <__libc_init_array+0x24>
 80008e4:	f000 f81a 	bl	800091c <_init>
 80008e8:	2600      	movs	r6, #0
 80008ea:	4d0a      	ldr	r5, [pc, #40]	@ (8000914 <__libc_init_array+0x40>)
 80008ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000918 <__libc_init_array+0x44>)
 80008ee:	1b64      	subs	r4, r4, r5
 80008f0:	10a4      	asrs	r4, r4, #2
 80008f2:	42a6      	cmp	r6, r4
 80008f4:	d105      	bne.n	8000902 <__libc_init_array+0x2e>
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fc:	4798      	blx	r3
 80008fe:	3601      	adds	r6, #1
 8000900:	e7ee      	b.n	80008e0 <__libc_init_array+0xc>
 8000902:	f855 3b04 	ldr.w	r3, [r5], #4
 8000906:	4798      	blx	r3
 8000908:	3601      	adds	r6, #1
 800090a:	e7f2      	b.n	80008f2 <__libc_init_array+0x1e>
 800090c:	08000934 	.word	0x08000934
 8000910:	08000934 	.word	0x08000934
 8000914:	08000934 	.word	0x08000934
 8000918:	08000938 	.word	0x08000938

0800091c <_init>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	bf00      	nop
 8000920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000922:	bc08      	pop	{r3}
 8000924:	469e      	mov	lr, r3
 8000926:	4770      	bx	lr

08000928 <_fini>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	bf00      	nop
 800092c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092e:	bc08      	pop	{r3}
 8000930:	469e      	mov	lr, r3
 8000932:	4770      	bx	lr
